- (reverse list)
+ (take x i)
+ (drop x i)
- (take-right flist i)
- (drop-right flist i)
- (split-at x i)
- (last pair)
  (last-pair pair)
+ (concatenate list-of-lists)
  (append-reverse rev-head tail)
- (zip clist_1 clist_2 ...)
- (unzip1 list)
- (unzip2 list)
- (unzip3 list)
- (unzip4 list)
- (unzip5 list)
- (count pred clist_1 clist_2)

  (fold kons knil clist_1 clist_2 ...)
  (fold-right kons knil clist_1 clist_2 ...)
  (pair-fold kons knil clist_1 clist_2 ...)
  (pair-fold-right kons knil clist_1 clist_2 ...)
  (reduce f ridentity list)
  (reduce-right f ridentity list)
- (unfold p f g seed [tail-gen])
- (unfold-right p f g seed [tail])
+ (map proc clist_1 clist_2 ...)
  (for-each proc clist_1 clist_2 ...)
+ (append-map f clist_1 clist_2 ...)
  (pair-for-each f clist_1 clist_2 ...)
+ (filter-map f clist_1 clist_2 ...)

+ (filter pred list)
- (partition pred list)
+ (remove pred list)

- (find pred clist)
- (find-tail pred clist)
+ (take-while pred clist)
+ (drop-while pred clist)
- (span pred clist)
- (break pred clist)
- (any pred clist_1 clist_2 ...)
- (every pred clist_1 clist_2 ...)
- (list-index pred clist_1 clist_2 ...)
- (member x list [=])
+ (delete x list [=])
+ (delete-duplicates list [=])

  (assoc key alist [=])
  (alist-cons key datum alist)
  (alist-copy alist)
  (alist-delete key alist [=])

  (lset<= = list_1 ...)
  (lset= = list_1 list_2 ...)
  (lset-adjoin = list elt_1 ...)
  (lset-union = list_1 ...)
  (lset-intersection = list_1 list_2 ...)
  (lset-difference = list_1 list_2 ...)
  (lset-xor = list_1 ...)
  (lset-diff+intersection = list_1 list_2 ...)
  (lset-union! = list_1 ...)
  (lset-intersection! = list_1 list_2 ...)
  (lset-difference! = list_1 list_2 ...)
  (lset-xor! = list_1 ...)
  (lset-diff+intersection! = list_1 list_2 ...)
